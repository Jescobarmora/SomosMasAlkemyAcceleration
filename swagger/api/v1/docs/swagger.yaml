---
openapi: 3.0.1
info:
  title: OT-260 API
  version: v1
  description: Alkemy OT-260 Ruby API Documentation.
paths:
  "/api/v1/categories":
    get:
      summary: Get All Categories
      tags:
      - Categories
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: succesful
    post:
      summary: Create Category
      tags:
      - Categories
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
              required:
              - name
  "/api/v1/categories/{id}":
    get:
      summary: Show Category
      tags:
      - Categories
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: succesful
    put:
      summary: Update Category
      tags:
      - Categories
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
              required:
              - name
    delete:
      summary: Delete Category
      tags:
      - Categories
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: deleted successfully
  "/api/v1/contacts":
    get:
      summary: Get All Contacts
      tags:
      - Contacts
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create Contact
      tags:
      - Contacts
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                  nullable: true
                message:
                  type: string
                  nullable: true
              required:
              - name
              - email
  "/api/v1/members":
    get:
      summary: Get All Members
      tags:
      - Members
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create Member
      tags:
      - Members
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                facebook_url:
                  type: string
                  nullable: true
                linkedin_url:
                  type: string
                  nullable: true
                instagram_url:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
              required:
              - name
  "/api/v1/members/{id}":
    put:
      summary: Update Member
      tags:
      - Members
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                facebook_url:
                  type: string
                  nullable: true
                linkedin_url:
                  type: string
                  nullable: true
                instagram_url:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
              required:
              - name
    delete:
      summary: Delete Member
      tags:
      - Members
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: deleted successfully
  "/api/v1/organizations/{id}/public":
    get:
      summary: shows an organization
      tags:
      - Organizations
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/organizations/{id}":
    put:
      summary: updates an organization
      tags:
      - Organizations
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                about_us_text:
                  type: text
                  nullable: true
                address:
                  type: string
                  nullable: true
                email:
                  type: string
                name:
                  type: string
                facebook_url:
                  type: string
                  nullable: true
                linkedin_url:
                  type: string
                  nullable: true
                instagram_url:
                  type: string
                  nullable: true
                phone:
                  type: integer
                  nullable: true
                welcome_text:
                  type: text
              required:
              - name
              - email
              - welcome_text
  "/api/v1/testimonials":
    get:
      summary: Get All Testimonials
      tags:
      - Testimonials
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create Testimonials
      tags:
      - Testimonials
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
                  nullable: true
              required:
              - name
  "/api/v1/testimonials/{id}":
    patch:
      summary: Update Testimonial
      tags:
      - Testimonials
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
                  nullable: true
              required:
              - name
    delete:
      summary: Delete Testimonial
      tags:
      - Testimonials
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: deleted successfully
  "/api/v1/users":
    get:
      summary: Get All Users
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/auth/me":
    get:
      summary: Get My User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/auth/register":
    post:
      summary: Register As User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  properties:
                    email:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    role_id:
                      type: integer
                    password:
                      type: string
              required:
              - email
              - first_name
              - last_name
  "/api/v1/auth/login":
    post:
      summary: Login As User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  properties:
                    email:
                      type: string
                    password:
                      type: string
              required:
              - email
              - password
  "/api/v1/users/{id}":
    put:
      summary: Update User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: updated successfully
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  properties:
                    email:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    password:
                      type: string
              required:
              - email
              - first_name
              - last_name
    delete:
      summary: Delete User
      tags:
      - Users
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: deleted successfully
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      name: Authorization
